*******************
 PROJECT OVERVIEW
*******************

Developer: Nguyen Dinh Nguyen
Date of Completion: March 12, 2016

The game server is the first part of the "TCP Server with Select" for the Computer Networking class	
taught by Prof. Christopher GauthierDickey at the University of Denver.


The server is designed to host a simple game in which the playing space takes place on a 1.0 by 1.0 by 1.0 sized map. 	
In this game, the players control robots that move around the field and have one ability, self-annihilate. 	
This self-annihilation creates an explosion that destroys all robots within a given radius. 	
The commands a player can send to the server include:

1. Updating the position of their robot: this is an x, y and z position    
2. Self-annihilate: to enact the self-destruct routine
3. Spawn: to create a new robot at a given position

The server will send back the following to each player:

1. A Join response message to the player when they first join to give them their ID
2. An update that includes the player ID, position, and the score of each player. 
3. A message when a player self-annihilates, including which players IDs were taken out of play.
4. A message when a new robot has spawned, its location, and its ID.

For the server, each message sent must have the following header fields:

1. Message length (4 bytes)
2. Version (1 byte)
3. Type (1 byte) 

The message length field is not a project requirement.
It was added by the developer to solve the problem of uintended packet concatentation caused by TCP's Nagle algorithm.
The type field specifies the type of message sent by the server:

1. Player join response: 
Sent to a new player that just joined the server. Used to assign an ID to the player. Contains:

player ID (32-bit) | integer (4 bytes)
			
2. Server map update:
Sent to all players to all the players 20 times per second. Used to update all players with the state of the map. Contains:

number of robots on map (16-bit) |	integer (2 bytes)
robot ID (32-bit)		 		 |	integer (4 bytes)
robot position x (32-bit)	 	 |	floating point (4 bytes)
robot position y (32-bit)		 |	floating point (4 bytes)
robot position z (32-bit)		 |	floating point (4 bytes)
...  								...

The number of robots to include in the message depends on the number of live robots on the map

3. Self-annihilation result:
Sent to all players after a self-annihilation event. Used to update all players of the players killed by the explosion. Contains:

ID of self-annihilation initiator (32-bit) | 	unsigned integer (4 bytes)
Number of robots affected (16-bit)		   |	unsigned integer (2 bytes)
ID of robot annihilated (32-bit)		   |	unsigned integer (4 bytes)
... 											... 
			
The number of robots to include in the message depends on the number of robots killed
			
4. Player spawn event
Sent to all players except the newly spawn player after the new player has been spawn on the map. Contains:

robot ID (32-bit)		  |	integer (4 bytes)
robot position x (32-bit) |	float (4 bytes)
robot position y (32-bit) |	float (4 bytes)
robot position z (32-bit) |	float (4 bytes)
	
	
**********************
 PROJECT REQUIREMENTS
**********************

1. Server must be non-blocking. This must be implemented using select(). No multi-threading is allowed
2. Map update must be broadcasted every 1/20 second.
3. The user must be able to input the server's port number from the command line during set up

A tutorial on basic TCP socket programming and the use of select() was provided by prof. GauthierDickey
Any time code samples from the tutorial were used to set up the TCP sockets, prof. GauthierDickey was credited in the comments.
If there's any uncredited codes, it's the sole responsibility of the developer.
No other design of implementation details were provided.
			 

**************
 MAIN CLASSES
**************

There's only 1 main class: GameServer
The game server provides all the required networking functionalities to the clients.
The server also serves as the "physical environment" in which the game takes place.
The server simulates the physical interactions among the players by calculating the chain effects of a self-annihilation event.
The server is responsible for announcing players' actions and events to clients.


*******************
 COMPILATION & RUN
*******************

To compile the program, navigate to the project's folder.
In the command line, type "make".

To run the server, type "./server [port number]" to the command line



